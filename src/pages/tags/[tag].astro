---
import BaseLayout from '../../layouts/BaseLayout.astro';
import { getCollection } from 'astro:content';

export async function getStaticPaths() {
  const allPosts = await getCollection('blog');
  const publishedPosts = allPosts.filter(post => !post.data.draft);

  // Get all unique tags
  const allTags = new Set<string>();
  publishedPosts.forEach(post => {
    post.data.tags?.forEach(tag => allTags.add(tag));
  });

  // Create a path for each tag
  return Array.from(allTags).map(tag => ({
    params: { tag },
    props: {
      tag,
      posts: publishedPosts
        .filter(post => post.data.tags?.includes(tag))
        .sort((a, b) => b.data.publish_date.valueOf() - a.data.publish_date.valueOf())
    },
  }));
}

const { tag, posts } = Astro.props;
---

<BaseLayout title={`Posts tagged "${tag}" - Caleb Ukle`} description={`Blog posts tagged with ${tag}`}>
  <section class="tag-header">
    <h1>Posts tagged: <span class="tag-name">{tag}</span></h1>
    <p>{posts.length} {posts.length === 1 ? 'post' : 'posts'} found</p>
    <a href="/" class="back-link">← All posts</a>
  </section>

  <section class="posts">
    {posts.map(post => {
      const formattedDate = post.data.publish_date.toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'short',
        day: 'numeric'
      });

      return (
        <article class="post-card">
          <a href={`/blog/${post.id.replace('.md', '')}`}>
            <h2>{post.data.title}</h2>
            <p class="post-description">{post.data.description}</p>
            <div class="post-meta">
              <time datetime={post.data.publish_date.toISOString()}>
                {formattedDate}
              </time>
              {post.data.tags && post.data.tags.length > 0 && (
                <>
                  <span class="separator">•</span>
                  <span class="tags">{post.data.tags.join(', ')}</span>
                </>
              )}
            </div>
          </a>
        </article>
      );
    })}
  </section>
</BaseLayout>

<style>
  .tag-header {
    margin-bottom: 3rem;
    padding-bottom: 2rem;
    border-bottom: 2px solid var(--color-border);
  }

  .tag-header h1 {
    font-size: 2rem;
    margin-bottom: 0.5rem;
  }

  .tag-name {
    background: #000;
    color: #fff;
    padding: 0.25rem 0.75rem;
    font-size: 1.75rem;
  }

  .tag-header p {
    font-size: 1rem;
    color: #666;
    margin-bottom: 1rem;
  }

  .back-link {
    display: inline-block;
    font-weight: 500;
    text-decoration: none;
    color: var(--color-text);
    font-size: 0.875rem;
  }

  .back-link:hover {
    text-decoration: underline;
  }

  .posts {
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }

  .post-card {
    padding-bottom: 2rem;
    border-bottom: 1px solid #ddd;
  }

  .post-card:last-child {
    border-bottom: none;
  }

  .post-card a {
    text-decoration: none;
    color: var(--color-text);
    display: block;
  }

  .post-card a:hover h2 {
    color: var(--color-link);
  }

  .post-card h2 {
    font-size: 1.5rem;
    margin-bottom: 0.5rem;
    transition: color 0.2s;
  }

  .post-description {
    color: #333;
    margin-bottom: 0.75rem;
    line-height: 1.5;
  }

  .post-meta {
    font-size: 0.875rem;
    color: #666;
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    align-items: center;
  }

  .separator {
    color: #ccc;
  }

  .tags {
    font-size: 0.8125rem;
  }

  @media (max-width: 640px) {
    .tag-header h1 {
      font-size: 1.5rem;
    }

    .tag-name {
      font-size: 1.5rem;
    }

    .post-card h2 {
      font-size: 1.25rem;
    }
  }
</style>
